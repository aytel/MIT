#include "my_vector.h"
#include <algorithm>

MyVector::MyVector() : sz(0), cp(2) {
	data = new int[2];
}

MyVector::MyVector(std::size_t init_capacity): sz(0), cp(init_capacity) {
	data = new int[init_capacity];
}

MyVector::~MyVector() {
	delete [] data;
}

void MyVector::set(std::size_t index, int value) {
	data[index] = value;
}

int MyVector::get(std::size_t index) {
	return data[index];
}

std::size_t MyVector::size() {
	return sz;
}

std::size_t MyVector::capacity() {
	return cp;
}

void MyVector::reserve(std::size_t new_capacity) {
	if (new_capacity <= cp)
		return;
	int *new_data = new int[new_capacity];
	copy(data, new_data);
	std::swap(data, new_data);
	delete [] new_data;
	cp = new_capacity;
}

void MyVector::resize(std::size_t new_size) {
	if (new_size <= cp) {
		sz = new_size;
		return;
	}
	reserve(std::max(new_size, 2 * cp));
	while (sz < new_size)
		data[sz++] = 0;
}

void MyVector::push_back(int value) {
	if (sz == cp)
		reserve(2 * cp);
	data[this->sz++] = value;
}

void MyVector::insert(std::size_t index, int value) {
	push_back(value);
	std::rotate(data + index, data + sz - 1, data + sz);
}

void MyVector :: erase(std::size_t index) {
	std::rotate(data + index, data + index + 1, data + sz);
	this->sz--;
}

void MyVector :: copy(int *src, int *dest) {
	for (std::size_t it = 0; it < this->sz; it++)
		dest[it] = src[it];
}